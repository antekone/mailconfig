package org.anadoxin.mailconfig;

import org.anadoxin.mailconfig.boot.Log;
import org.apache.commons.io.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import java.util.*;

public class FetchmailRenderer extends AbstractRenderer {
    private CommonContext ctx;

    public FetchmailRenderer(CommonContext ctx) {
        this.ctx = ctx;
    }

    public void log(String fmt, Object... args) {
        String s = String.format(fmt, args);
        Log.put("[fetchmail] %s", s);
    }

    public void invoke() {
        try {
            doInvoke();
        } catch(FileNotFoundException e) {
            log("File not found error: %s", e.getMessage());
        } catch(IOException e) {
            log("I/O exception: %s", e.getMessage());
        }
    }

    public void doInvoke() throws FileNotFoundException, IOException {
        createConfigs();
        createRunScripts();
    }

    private void createRunScripts() throws FileNotFoundException, IOException {
        for(String accountName: mc.getAccountList()) {
            UserAccount acc = mc.getAccountByName(accountName);
            ServerInfo si = mc.getServerByName(acc.getServer());

            String configFilePathString = acc.getOption("configfile");
            String homePathString = FilenameUtils.getFullPath(configFilePathString);
            String runscriptFilePathString = homePathString + "/runscript.sh";
            String pidFilePathString = acc.getOption("pidfile");
            String logfilePathString = acc.getOption("logfile");
            String errorfilePathString = acc.getOption("errorfile");

            if(!checkString(configFilePathString)) {
                log("Fatal: missing `configfile` option");
                return;
            }

            if(!checkString(pidFilePathString)) {
                log("Fatal: missing `pidfile` option");
                return;
            }

            if(!checkString(logfilePathString)) {
                log("Fatal: missing `logfile` option");
                return;
            }

            if(!checkString(errorfilePathString)) {
                log("Fatal: missing `errorfile` option");
                return;
            }

            String timeoutString = acc.getOption("timeout");
            String daemonOptionString = String.format("-d %s", acc.getOption("dinterval"));

            if(!checkString(timeoutString)) {
                log("Fatal: missing `timeout` option");
                return;
            }

            if(!checkString(acc.getOption("dinterval"))) {
                log("Fatal: missing `dinterval` option");
                return;
            }

            PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(runscriptFilePathString))));
            pw.printf("#!/usr/bin/env bash\n");
            pw.printf("#\n");
            pw.printf("# Runscript for account %s\n", acc.getName());
            pw.printf("# It has been automatically generated by MailConfig, so editing this file is futile.\n");
            pw.printf("#\n\n");
            pw.printf("FETCHMAILHOME='%s'\n", homePathString);
            pw.printf("/usr/bin/fetchmail -f '%s' --pidfile '%s' -v %s --timeout %s >'%s' 2>'%s'\n", configFilePathString, pidFilePathString, daemonOptionString, timeoutString, logfilePathString, errorfilePathString);
            pw.flush();
            pw.close();

            Set<PosixFilePermission> set = new HashSet<PosixFilePermission>();
            set.add(PosixFilePermission.OWNER_READ);
            set.add(PosixFilePermission.OWNER_WRITE);
            set.add(PosixFilePermission.OWNER_EXECUTE);
            set.add(PosixFilePermission.GROUP_READ);
            set.add(PosixFilePermission.GROUP_EXECUTE);
            set.add(PosixFilePermission.OTHERS_READ);
            set.add(PosixFilePermission.OTHERS_EXECUTE);
            Files.setPosixFilePermissions(FileSystems.getDefault().getPath(runscriptFilePathString), set);

            this.ctx.addRunScriptFilePath(runscriptFilePathString);
        }
    }

    private void createConfigs() throws FileNotFoundException, IOException {
        for(String accountName: mc.getAccountList()) {
            UserAccount acc = mc.getAccountByName(accountName);
            ServerInfo si = mc.getServerByName(acc.getServer());

            String configFilePathString = acc.getOption("configfile");
            if(!checkString(configFilePathString)) {
                log("Fatal: missing `configfile` option");
                return;
            }

            new File(FilenameUtils.getFullPath(configFilePathString)).mkdirs();

            PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(configFilePathString))));
            pw.printf("#\n");
            pw.printf("# Configuration for account %s\n", acc.getName());
            pw.printf("# It has been automatically generated by MailConfig, so editing this file is futile.\n");
            pw.printf("#\n\n");
            pw.printf("set logfile \"%s\"\n", acc.getOption("logfile"));
            pw.printf("poll %s protocol %s", si.getHostName(), si.getProtocol());

            String interval = acc.getOption("interval");
            if(!checkString(interval)) {
                log("Fatal: missing `interval` option");
                return;
            }

            if(interval.compareTo("1") != 0) {
                pw.printf(" interval %s", interval);
            }

            pw.printf("\n");
            pw.printf("user \"%s\" is %s here password \"%s\"", acc.getUser(), acc.getOption("localuser"), acc.getPass());

            if(acc.getOption("fetchlimit") != null) {
                pw.printf(" fetchlimit %s", acc.getOption("fetchlimit"));
            }

            if(si.isWantSSL()) {
                pw.printf(" ssl");
            }

            if(acc.getOption("mda") != null) {
                pw.printf(" mda \"%s\"", acc.getOption("mda"));
            }

            if(si.isWantSSL()) {
                pw.printf(" sslcertck");
            }

            if(si.getOption("idle") != null) {
                pw.printf(" idle");
            }

            pw.printf("\n");
            pw.flush();
            pw.close();

            // fetchmail expects its config files to be 0600
            Set<PosixFilePermission> set = new HashSet<PosixFilePermission>();
            set.add(PosixFilePermission.OWNER_READ);
            set.add(PosixFilePermission.OWNER_WRITE);
            Files.setPosixFilePermissions(FileSystems.getDefault().getPath(configFilePathString), set);
        }
    }
}
